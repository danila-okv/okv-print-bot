# handlers/print_confirm.py

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext

from services.print_service import PrintJob, print_manager
from handlers.payment import send_main_menu
from handlers.payment import PaymentMethod
from messages import *

router = Router()


@router.callback_query(F.data == "confirm_payment")
async def handle_payment_confirmation(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª
    - –¥–æ—Å—Ç–∞—ë—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    - —Å—Ç–∞–≤–∏—Ç –≤ –æ—á–µ—Ä–µ–¥—å –ø–µ—á–∞—Ç–∏
    - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å
    """
    print("[DEBUG] handle_payment_confirmation called")
    data = await state.get_data()
    await state.clear()

    file_path = data.get("file_path")
    page_count = data.get("page_count")
    file_name = data.get("file_name")

    if not all([file_path, page_count, file_name]):
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∞–π–ª–µ —É—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await send_main_menu(callback.bot, callback.from_user.id)
        return

    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—á–∞—Ç—å
    job = PrintJob(
        user_id=callback.from_user.id,
        file_path=file_path,
        file_name=file_name,
        page_count=page_count,
        bot=callback.bot
    )

    position = await print_manager.add_job(job)

    if position == 1:
        await callback.message.edit_text("‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ù–∞—á–∏–Ω–∞—é –ø–µ—á–∞—Ç—å...")
    else:
        await callback.message.edit_text(
            f"‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.\nüìë –§–∞–π–ª –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å (–ø–æ–∑–∏—Ü–∏—è {position})."
        )
