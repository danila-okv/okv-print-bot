# modules/admin/bot_control.py

from db import get_connection
from typing import Optional, List, Dict

PAUSE_KEY = 'paused'

def set_pause(reason: str) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –ø–∞—É–∑—ã —Å –ø—Ä–∏—á–∏–Ω–æ–π."""
    with get_connection() as conn:
        conn.execute(
            "INSERT OR REPLACE INTO bot_state(key, value) VALUES (?, ?)",
            (PAUSE_KEY, reason)
        )
        conn.commit()

def clear_pause() -> None:
    """–°–Ω—è—Ç—å —Ñ–ª–∞–≥ –ø–∞—É–∑—ã."""
    with get_connection() as conn:
        conn.execute("DELETE FROM bot_state WHERE key = ?", (PAUSE_KEY,))
        conn.commit()

def is_paused() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ —Ñ–ª–∞–≥ –ø–∞—É–∑—ã."""
    cur = get_connection().execute(
        "SELECT 1 FROM bot_state WHERE key = ?", (PAUSE_KEY,)
    )
    return cur.fetchone() is not None

def get_pause_reason() -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã –ø–∞—É–∑—ã."""
    cur = get_connection().execute(
        "SELECT value FROM bot_state WHERE key = ?", (PAUSE_KEY,)
    )
    row = cur.fetchone()
    return row['value'] if row else None

def queue_action(user_id: int, action: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã."""
    with get_connection() as conn:
        conn.execute(
            "INSERT INTO paused_actions(user_id, action) VALUES (?, ?)",
            (user_id, action)
        )
        conn.commit()

def pop_all_queued_actions() -> List[Dict]:
    """
    –í—ã—Ç—è–Ω—É—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ dict-–æ–≤ —Å –ø–æ–ª—è–º–∏ id, user_id, action.
    """
    with get_connection() as conn:
        cur = conn.execute(
            "SELECT id, user_id, action FROM paused_actions ORDER BY created_at"
        )
        rows = [dict(row) for row in cur.fetchall()]
        conn.execute("DELETE FROM paused_actions;")
        conn.commit()
    return rows

from functools import wraps
from aiogram import types

from functools import wraps
from aiogram import types
from db import get_connection

# ‚Äî –≤–∞—à –∫–æ–¥ –ø–æ —Ñ–ª–∞–≥–∞–º is_paused(), queue_action() –∏ —Ç.–ø. ‚Äî

def check_paused(func):
    """
    –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤:
    –µ—Å–ª–∏ –±–æ—Ç –Ω–∞ –ø–∞—É–∑–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —é–∑–µ—Ä—É.
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è Message, –∏ –¥–ª—è CallbackQuery.
    """
    @wraps(func)
    async def wrapper(event, *args, **kwargs):
        from modules.admin.bot_control import is_paused, get_pause_reason, queue_action

        if is_paused():
            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º user_id
            user_id = event.from_user.id

            # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–µ–π—Å—Ç–≤–∏—è
            if isinstance(event, types.Message):
                action_text = event.text or "<no text>"
            elif isinstance(event, types.CallbackQuery):
                action_text = event.data or "<no data>"
            else:
                action_text = "<unknown action>"

            # –∫–ª–∞–¥—ë–º –≤ –æ—á–µ—Ä–µ–¥—å
            queue_action(user_id, action_text)

            # –ø—Ä–∏—á–∏–Ω–∞ –ø–∞—É–∑—ã
            reason = get_pause_reason() or "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

            # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if isinstance(event, types.Message):
                await event.reply(
                    f"üöß –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ¬´{reason}¬ª\n"
                    "–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî –∫–∞–∫ —Ç–æ–ª—å–∫–æ —è –≤–æ–∑–æ–±–Ω–æ–≤–ª—é —Ä–∞–±–æ—Ç—É, –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ–± —ç—Ç–æ–º."
                )
            else:  # CallbackQuery
                # –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É
                await event.answer(
                    f"üöß –ë–æ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ¬´{reason}¬ª\n"
                    "–í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî –Ω–∞–ø–æ–º–Ω—é –≤–∞–º, –∫–æ–≥–¥–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏–º —Ä–∞–±–æ—Ç—É.",
                    show_alert=True
                )
            return  # –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä

        # –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–ª—å—à–µ
        return await func(event, *args, **kwargs)

    return wrapper
