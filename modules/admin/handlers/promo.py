from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup

from modules.ui.keyboards.admin import promo_type_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from modules.ui.keyboards.tracker import send_managed_message
from modules.admin.services.promo import create_promo, promo_exists
from modules.decorators import admin_only
from states import PromoStates
from datetime import datetime

router = Router()


@router.message(Command("promo"))
@admin_only
async def cmd_promo(message: Message, state: FSMContext):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo [–∫–æ–¥]")

    code = parts[1].strip()

    if promo_exists(code):
        return await message.reply(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    await state.update_data(code=code)
    await state.set_state(PromoStates.choosing_type)

    await send_managed_message(
        message.bot,
        message.from_user.id,
        f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: <b>{code}</b>\n"
             "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.",
        promo_type_kb
    )

@router.callback_query(PromoStates.choosing_type)
async def promo_choose_type(callback: CallbackQuery, state: FSMContext):
    await state.update_data(reward_type=callback.data)
    await state.set_state(PromoStates.entering_activations)
    await callback.message.edit_text("–í–≤–µ–¥–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞:")

@router.message(PromoStates.entering_activations)
async def promo_enter_activations(message: Message, state: FSMContext):
    try:
        count = int(message.text.strip())
        if count < 1:
            raise ValueError()
    except:
        return await message.reply("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π")
    await state.update_data(activations_total=count)
    data = await state.get_data()
    if data['reward_type'] == 'bonus_pages':
        await message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã:")
    else:
        await message.answer("–í–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã (–æ—Ç 1% –¥–æ 100%):")
    await state.set_state(PromoStates.entering_reward_value)

@router.message(PromoStates.entering_reward_value)
async def promo_enter_reward_value(message: Message, state: FSMContext):
    text = message.text.strip().replace(",", ".").replace(" ", "")
    if text.endswith("%"):
        text = text[:-1]

    try:
        value = float(text)
        if value <= 0 or value > 100:
            raise ValueError()
    except ValueError:
        return await message.reply("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ –æ—Ç 1 –¥–æ 100% (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30%)")

    await state.update_data(reward_value=value)
    await state.set_state(PromoStates.entering_expires_at)
    await message.answer("–í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ—Ç¬ª, —á—Ç–æ–±—ã –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å:")

@router.message(PromoStates.entering_expires_at)
async def promo_enter_expires_at(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    if text in ("–Ω–µ—Ç", "none", "-"):
        await state.update_data(expires_at=None)
    else:
        try:
            dt = datetime.strptime(text, "%Y-%m-%d")
            await state.update_data(expires_at=dt.strftime("%Y-%m-%d"))
        except:
            return await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ—Ç¬ª")
    
    data = await state.get_data()
    txt = f"""–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:

üîë <b>{data['code']}</b>
üéÅ –¢–∏–ø: {'–°—Ç—Ä–∞–Ω–∏—Ü—ã' if data['reward_type']=='bonus_pages' else '–°–∫–∏–¥–∫–∞'}
üìä –ó–Ω–∞—á–µ–Ω–∏–µ: {data['reward_value']}
üîÅ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {data['activations_total']}
‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {data['expires_at'] or '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"""

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_promo")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_promo")]
    ])
    await state.set_state(PromoStates.confirming)
    await message.answer(txt, reply_markup=kb)



@router.callback_query(PromoStates.confirming)
async def promo_final_confirm(callback: CallbackQuery, state: FSMContext):
    if callback.data == "cancel_promo":
        await state.clear()
        return await callback.message.edit_text("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.")

    data = await state.get_data()
    create_promo(
        code=data['code'],
        activations_total=data['activations_total'],
        reward_type=data['reward_type'],
        reward_value=data['reward_value'],
        expires_at=data['expires_at']
    )
    await state.clear()
    await callback.message.edit_text("üéâ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
