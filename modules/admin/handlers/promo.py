from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup

from modules.ui.keyboards.admin import promo_type_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from modules.ui.keyboards.tracker import send_managed_message
from modules.admin.services.promo import create_promo, promo_exists
from modules.decorators import admin_only
from states import PromoStates
from datetime import datetime

router = Router()


@router.message(Command("promo"))
@admin_only
async def cmd_promo(message: Message, state: FSMContext):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        # –í—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —É–≥–ª–æ–≤—ã—Ö —Å–∫–æ–±–∫–∞—Ö, –Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –µ–≥–æ: &lt;–∫–æ–¥&gt;
        return await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo &lt;–∫–æ–¥&gt;")

    code = parts[1].strip()

    if promo_exists(code):
        return await message.reply(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    await state.update_data(code=code)
    await state.set_state(PromoStates.choosing_type)

    await send_managed_message(
        message.bot,
        message.from_user.id,
        f"–í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: <b>{code}</b>\n"
             "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.",
        promo_type_kb
    )

@router.callback_query(PromoStates.choosing_type)
async def promo_choose_type(callback: CallbackQuery, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã. –ó–Ω–∞—á–µ–Ω–∏—è callback.data –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ promo_type_kb:
    ADMIN_BONUS_PAGES –∏–ª–∏ ADMIN_DISCOUNT. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ 'pages' –∏–ª–∏ 'discount'.
    """
    reward_type_raw = callback.data
    reward_type = "pages" if reward_type_raw == "bonus_pages" else "discount"
    await state.update_data(reward_type=reward_type)
    await state.set_state(PromoStates.entering_activations)
    await callback.message.edit_text("–í–≤–µ–¥–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞:")

@router.message(PromoStates.entering_activations)
async def promo_enter_activations(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞."""
    try:
        count = int(message.text.strip())
        if count < 1:
            raise ValueError()
    except Exception:
        return await message.reply("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π")

    await state.update_data(activations_total=count)
    data = await state.get_data()
    if data['reward_type'] == 'pages':
        await message.answer("–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–≥—Ä–∞–¥—ã:")
    else:
        await message.answer("–í–≤–µ–¥–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–æ—Ç 1 –¥–æ 100), –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è:")
    await state.set_state(PromoStates.entering_reward_value)

@router.message(PromoStates.entering_reward_value)
async def promo_enter_reward_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏)."""
    text = message.text.strip().replace(",", ".").replace(" ", "")
    # –£–±–∏—Ä–∞–µ–º –∑–Ω–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –≤–≤–µ–¥—ë–Ω
    if text.endswith("%"):
        text = text[:-1]

    data = await state.get_data()
    reward_type = data.get('reward_type')
    try:
        value = float(text)
    except ValueError:
        await message.reply("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return

    if reward_type == 'discount':
        # –°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100
        if value <= 0 or value > 100:
            await message.reply("‚ùå –°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
            return
    else:
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º
        if value <= 0 or int(value) != value:
            await message.reply("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º")
            return

    await state.update_data(reward_value=value)
    # –î–ª—è —Å–∫–∏–¥–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è, –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å—Ä–æ–∫ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω
    if reward_type == 'discount':
        await state.set_state(PromoStates.entering_duration)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7)\n"
            "–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –±–µ—Å—Å—Ä–æ—á–Ω—ã–º:"
        )
    else:
        # –î–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ–≥–¥–∞ –±–µ—Å—Å—Ä–æ—á–Ω—ã–π
        await state.update_data(duration_days=None)
        await state.set_state(PromoStates.entering_message)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {value} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã.\n"
            "–ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω—É–∂–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª."
        )

@router.message(PromoStates.entering_duration)
async def promo_enter_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π)."""
    text = message.text.strip().lower()
    if text in ("–Ω–µ—Ç", "none", "-"):
        duration = None
    else:
        try:
            duration_int = int(text)
            if duration_int < 1:
                raise ValueError()
            duration = duration_int
        except Exception:
            return await message.reply("‚ùå –í–≤–µ–¥–∏ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π –∏–ª–∏ '–Ω–µ—Ç'")

    await state.update_data(duration_days=duration)
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(PromoStates.entering_message)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {value} –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∏ {date} –¥–ª—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.\n"
        "–ï—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –Ω—É–∂–µ–Ω, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–Ω–µ—Ç¬ª."
    )

@router.message(PromoStates.entering_message)
async def promo_enter_message(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    text = message.text
    if text.strip().lower() in ("–Ω–µ—Ç", "none", "-"):
        template = None
    else:
        template = text
    await state.update_data(message_template=template)
    data = await state.get_data()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    type_text = '–°—Ç—Ä–∞–Ω–∏—Ü—ã' if data['reward_type'] == 'pages' else '–°–∫–∏–¥–∫–∞'
    value_text = data['reward_value']
    activations = data['activations_total']
    duration = data.get('duration_days')
    duration_text = f"{duration} –¥–Ω." if duration else '–ë–µ—Å—Å—Ä–æ—á–Ω—ã–π'
    template_text = template if template else '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ'
    confirm_text = (
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞:\n\n"
        f"üîë <b>{data['code']}</b>\n"
        f"üéÅ –¢–∏–ø: {type_text}\n"
        f"üìä –ó–Ω–∞—á–µ–Ω–∏–µ: {value_text}\n"
        f"üîÅ –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {activations}\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {duration_text}\n"
        f"üìù –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è: {template_text}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
    )
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_promo")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_promo")],
        ]
    )
    await state.set_state(PromoStates.confirming)
    await message.answer(confirm_text, reply_markup=kb)



@router.callback_query(PromoStates.confirming)
async def promo_final_confirm(callback: CallbackQuery, state: FSMContext):
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞–∂–∞–ª –æ—Ç–º–µ–Ω—É ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
    if callback.data == "cancel_promo":
        await state.clear()
        await callback.message.edit_text("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ.")
        return

    data = await state.get_data()
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–æ–∫–æ–¥ —Å —É—á—ë—Ç–æ–º –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π: —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏ —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
    create_promo(
        code=data['code'],
        activations_total=data['activations_total'],
        reward_type=data['reward_type'],
        reward_value=data['reward_value'],
        expires_at=None,
        duration_days=data.get('duration_days'),
        message_template=data.get('message_template'),
    )
    await state.clear()
    await callback.message.edit_text("üéâ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
