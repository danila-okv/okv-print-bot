from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from modules.decorators import admin_only
from modules.ui.keyboards.tracker import send_managed_message
from db import get_connection

SUPPLY_ALIASES: dict[str, str] = {
    # Paper synonyms
    "paper": "–±—É–º–∞–≥–∞",
    "–±—É–º–∞–≥–∞": "–±—É–º–∞–≥–∞",
    "–ª–∏—Å—Ç": "–±—É–º–∞–≥–∞",
    "–ª–∏—Å—Ç—ã": "–±—É–º–∞–≥–∞",
    "a4": "–±—É–º–∞–≥–∞",
    # Ink/toner synonyms
    "ink": "—á–µ—Ä–Ω–∏–ª–∞",
    "—á–µ—Ä–Ω–∏–ª–∞": "—á–µ—Ä–Ω–∏–ª–∞",
    "—Ç–æ–Ω–µ—Ä": "—á–µ—Ä–Ω–∏–ª–∞",
    "–∫–∞—Ä—Ç—Ä–∏–¥–∂": "—á–µ—Ä–Ω–∏–ª–∞",
}

router = Router()

@admin_only
@router.message(Command("refill"))
async def cmd_refill(message: Message) -> None:
    parts = message.text.strip().split()
    parts.pop(0)

    if len(parts) < 2:
        await send_managed_message(
            bot=message.bot,
            user_id=message.from_user.id,
            text=
            "üìö –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
            "<b>/refill [–∑–∞–ø–∞—Å] [–∫–æ–ª-–≤–æ]</b> <i>[–º–∏–Ω–∏–º—É–º]</i>\n\n"
            "–ó–∞–ø–∞—Å—ã: <b>–±—É–º–∞–≥–∞, —á–µ—Ä–Ω–∏–ª–∞</b>"
        )
        return

    raw_name = parts[0].lower()
    supply_name = SUPPLY_ALIASES.get(raw_name)
    if supply_name is None:
        await send_managed_message(
            bot=message.bot,
            user_id=message.from_user.id,
            text=f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫: {raw_name}\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ: <b>–±—É–º–∞–≥–∞, —á–µ—Ä–Ω–∏–ª–∞</b>"
        )
        return

    # Parse quantity
    qty_str = parts[1].strip()
    if qty_str.isdigit() is False:
        await send_managed_message(
            bot=message.bot,
            user_id=message.from_user.id,
            text="‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        )
        return
    quantity = int(qty_str)
    if quantity <= 0:
        await send_managed_message(
            bot=message.bot,
            user_id=message.from_user.id,
            text="‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º"
        )
        return

    # Parse optional minimum
    min_val: int | None = None
    if len(parts) >= 3:
        min_str=parts[2].strip()
        if min_str.isdigit():
            min_val = int(min_str)
        else:
            await send_managed_message(
                bot=message.bot,
                user_id=message.from_user.id,
                text="‚ùå –ú–∏–Ω–∏–º—É–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
            )
            return

    with get_connection() as conn:
        row = conn.execute(
            "SELECT quantity, minimum FROM supplies WHERE name = ?",
            (supply_name,)
        ).fetchone()
        if row:
            # Existing supply: increment quantity and optionally update minimum
            new_minimum = min_val if min_val is not None else row["minimum"]
            conn.execute(
                "UPDATE supplies SET quantity = ?, minimum = ?, updated_at = CURRENT_TIMESTAMP WHERE name = ?",
                (quantity, new_minimum, supply_name),
            )
        else:
            # New supply: insert with given quantity and minimum (or zero if omitted)
            new_minimum = min_val if min_val is not None else 0
            conn.execute(
                "INSERT INTO supplies (name, quantity, minimum, updated_at) VALUES (?, ?, ?, CURRENT_TIMESTAMP)",
                (supply_name, quantity, new_minimum),
            )
        conn.commit()

    # Prepare a confirmation message.  We show both the increment and the
    # resulting total so the admin can verify the operation.
    note_parts: list[str] = [f"‚úÖ –ó–∞–ø–∞—Å <b>{supply_name}</b> –ø–æ–ø–æ–ª–Ω–µ–Ω"]
    note_parts.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity}</b>")
    old_min = row["minimum"] if row else 0
    if min_val is not None:
        note_parts.append(f"–ù–æ–≤—ã–π –º–∏–Ω–∏–º—É–º: <b>{new_minimum}</b>")
    else:
        note_parts.append(f"–ú–∏–Ω–∏–º—É–º: <b>{old_min}</b> (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")

    await send_managed_message(
        bot=message.bot,
        user_id=message.from_user.id,
        text="\n".join(note_parts)
    )

