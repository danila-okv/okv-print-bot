from aiogram import Router, F
from aiogram.types import Message
from modules.billing.services.promo import (
    promo_exists,
    promo_can_be_activated,
    has_activated_promo,
    record_promo_activation,
    add_user_bonus_pages,
    get_promo_info,
)
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from modules.ui.keyboards.tracker import send_managed_message

router = Router()

@router.message(F.text.regexp(r"^[\w\d–∞-—è–ê-–Ø—ë–Å]{3,30}$"))
async def handle_promo_code_input(message: Message):
    code = message.text.strip()

    if not promo_exists(code):
        return  # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ‚Äî –ø—É—Å—Ç—å –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª–æ–≤—è—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç

    user_id = message.from_user.id

    if has_activated_promo(user_id, code):
        await message.answer("‚ö†Ô∏è –¢—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥")
        return

    if not promo_can_be_activated(code):
        await message.answer("‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ, –≤–∫–ª—é—á–∞—è —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    info_data = get_promo_info(code)
    if not info_data:
        return

    reward_type = info_data["reward_type"]
    reward_value = info_data["reward_value"]
    duration_days = info_data.get("duration_days")
    message_template = info_data.get("message_template")
    expires_at = info_data.get("expires_at")

    # –§–∏–∫—Å–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–∞
    record_promo_activation(user_id, code)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if reward_type == "pages":
        add_user_bonus_pages(user_id, int(reward_value))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message_template:
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã {value} –∏ {date}
        # –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏/—Å—Ç—Ä–∞–Ω–∏—Ü
        value_str = str(int(reward_value)) if reward_type == "pages" else str(int(reward_value))
        # –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
        expiry_str = ""
        if duration_days:
            try:
                from datetime import datetime, timedelta
                expiry_date = datetime.now() + timedelta(days=int(duration_days))
                expiry_str = expiry_date.strftime("%Y-%m-%d")
            except Exception:
                expiry_str = ""
        elif expires_at:
            expiry_str = expires_at.split("T")[0] if "T" in expires_at else expires_at
        else:
            expiry_str = ""

        try:
            text = message_template.format(value=value_str, date=expires_at.strftime("%d.%m.%Y"))
        except Exception:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —à–∞–±–ª–æ–Ω –∫–∞–∫ –µ—Å—Ç—å
            text = message_template
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω –Ω–µ –∑–∞–¥–∞–Ω
        if reward_type == "pages":
            text = (
                f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                f"–¢—ã –ø–æ–ª—É—á–∏–ª <b>{int(reward_value)}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü"
            )
        else:
            text = (
                f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{code}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n"
                f"–¢—ã –ø–æ–ª—É—á–∏–ª —Å–∫–∏–¥–∫—É <b>{int(reward_value)}%</b>"
            )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ, —Å–ø–∞—Å–∏–±–æ!",
                    callback_data="main_menu"
                )
            ]
        ]
    )

    await send_managed_message(
        bot=message.bot,
        user_id=user_id,
        text=text,
        reply_markup=kb
    )