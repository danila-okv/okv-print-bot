# services/print_service.py

import asyncio
from collections import deque
from dataclasses import dataclass
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup
)
import subprocess
from messages import *

@dataclass
class PrintJob:
    user_id: int
    file_path: str
    file_name: str
    page_count: int
    bot: any  # aiogram.Bot

class PrintManager:
    def __init__(self, print_speed_sec_per_page=5):
        self.queue = deque()
        self.is_printing = False
        self.print_speed = print_speed_sec_per_page  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    async def add_job(self, job: PrintJob) -> int:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å.
        –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞ ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—á–∞—Ç—å.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏ (1 = –ø–µ—á–∞—Ç–∞–µ–º —Å—Ä–∞–∑—É).
        """
        self.queue.append(job)
        position = len(self.queue)

        if not self.is_printing:
            asyncio.create_task(self._start_printing())

        return position

    async def _start_printing(self):
        self.is_printing = True

        while self.queue:
            job = self.queue.popleft()

            try:
                est_time = job.page_count * self.print_speed
                await job.bot.send_message(
                    chat_id=job.user_id,
                    text=f"üñ®Ô∏è –ü–µ—á–∞—Ç–∞—é <b>{job.file_name}</b>\n‚è≥ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: <b>{est_time} —Å–µ–∫.</b>"
                )

                await self._print_file(job.file_path)

                await job.bot.send_message(
                    chat_id=job.user_id,
                    text=PRINT_DONE_TEXT
                )
            except Exception as e:
                await job.bot.send_message(
                    chat_id=job.user_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—á–∞—Ç–∏: {e}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=BUTTON_SUPPORT, url="https://t.me/danila_okv")]
                    ])
                )

            await asyncio.sleep(1)  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∏ –¥–µ—Ä–≥–∞–Ω–∏–π

        self.is_printing = False

    async def _print_file(self, file_path: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –≤ —Å–∏—Å—Ç–µ–º—É –ø–µ—á–∞—Ç–∏ —á–µ—Ä–µ–∑ lp (CUPS)
        """
        subprocess.run(["lp", file_path], check=True)


# üí° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
print_manager = PrintManager(print_speed_sec_per_page=5)
